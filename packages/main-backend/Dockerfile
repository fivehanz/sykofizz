# This file is generated by Nx.
#
# Build the docker image with `npx nx docker-build main-backend`.
# Tip: Modify "docker-build" options in project.json to change docker build args.
#
# Run the container with `docker run -p 3000:3000 -t main-backend`.
FROM docker.io/node:lts-alpine

ENV HOST=0.0.0.0
ENV PORT=3000

WORKDIR /app

RUN addgroup --system main-backend && \
          adduser --system -G main-backend main-backend

COPY dist/packages/main-backend main-backend
RUN chown -R main-backend:main-backend .

# You can remove this install step if you build with `--bundle` option.
# The bundled output will include external dependencies.
RUN npm --prefix main-backend --omit=dev -f install

CMD [ "node", "main-backend" ]


FROM node:lts-slim As build
# USER node
RUN curl -fsSL https://get.pnpm.io/install.sh | sh -
ENV NODE_ENV production

WORKDIR /usr/src/app

# COPY --chown=node:node . .
# COPY --chown=node:node pnpm-lock.yaml ./
# COPY --chown=node:node --from=development /usr/src/app/node_modules ./node_modules

RUN pnpm install


# ###################
# # PRODUCTION
# ###################

# FROM node:lts-slim As production

# COPY --chown=node:node --from=build /usr/src/app/node_modules ./node_modules
# COPY --chown=node:node --from=build /usr/src/app/dist ./dist

# CMD [ "node", "dist/main.js" ]


# TODO: build and test in arm64
# TODO: reduce size of the image

# TODO: use github action to build the image -- what branch strategy should be used?
# TODO: push it to docker hub

# TODO: setup argocd on microk8s
# TODO: setup CD repository and make it work with argocd
# TODO: setup ingress and make it work with cloudflare tunnel

# TODO: test full CD pipeline 